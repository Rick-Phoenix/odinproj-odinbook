/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as PostImport } from './routes/post'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AppRoomsIndexImport } from './routes/_app/rooms/index'
import { Route as AppChatsIndexImport } from './routes/_app/chats/index'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const PostRoute = PostImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppRoomsIndexRoute = AppRoomsIndexImport.update({
  id: '/rooms/',
  path: '/rooms/',
  getParentRoute: () => AppRoute,
} as any)

const AppChatsIndexRoute = AppChatsIndexImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/post': {
      id: '/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_app/chats/': {
      id: '/_app/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AppChatsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/rooms/': {
      id: '/_app/rooms/'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof AppRoomsIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppChatsIndexRoute: typeof AppChatsIndexRoute
  AppRoomsIndexRoute: typeof AppRoomsIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppChatsIndexRoute: AppChatsIndexRoute,
  AppRoomsIndexRoute: AppRoomsIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/post': typeof PostRoute
  '/signup': typeof SignupRoute
  '/chats': typeof AppChatsIndexRoute
  '/rooms': typeof AppRoomsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/post': typeof PostRoute
  '/signup': typeof SignupRoute
  '/chats': typeof AppChatsIndexRoute
  '/rooms': typeof AppRoomsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/post': typeof PostRoute
  '/signup': typeof SignupRoute
  '/_app/chats/': typeof AppChatsIndexRoute
  '/_app/rooms/': typeof AppRoomsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/post' | '/signup' | '/chats' | '/rooms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/post' | '/signup' | '/chats' | '/rooms'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/post'
    | '/signup'
    | '/_app/chats/'
    | '/_app/rooms/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  PostRoute: typeof PostRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  PostRoute: PostRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/login",
        "/post",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/chats/",
        "/_app/rooms/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/post": {
      "filePath": "post.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_app/chats/": {
      "filePath": "_app/chats/index.tsx",
      "parent": "/_app"
    },
    "/_app/rooms/": {
      "filePath": "_app/rooms/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
