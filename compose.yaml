services:
  prod:
    pull_policy: build
    build:
      context: .
      dockerfile: ./docker/prod.dockerfile
    image: nexus:prod
    networks:
      - caddy
    labels:
      caddy: ${VITE_DOMAIN}
      caddy.reverse_proxy: "{{upstreams ${PORT}}}"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_PROD_URL}
    depends_on:
      - postgres
    restart: unless-stopped

  dev:
    pull_policy: build
    build:
      context: .
      dockerfile: ./docker/dev.dockerfile
    image: nexus:dev
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_PROD_URL}
      - VITE_REMOTE_DEV=true
      - VITE_DOMAIN=dev.${VITE_DOMAIN}
    volumes:
      - ./apps:/app/apps
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/server/node_modules
      - /app/apps/client/node_modules
    networks:
      - caddy
    labels:
      caddy: dev.${VITE_DOMAIN}
      caddy.basicauth: /*
      caddy.basicauth.rick: $$2b$$12$$rrUJu0L44f3z86V2wHBdLu5D2DxO0d1ahHCh8HCE2OyoEgHaD/UJq
      caddy.1_handle: /vite/*
      caddy.1_handle.reverse_proxy: "{{upstreams http 5173}}"
      caddy.2_reverse_proxy: "{{upstreams 3000}}"
    depends_on:
      - postgres
    restart: unless-stopped
  postgres:
    image: postgres:14.17
    networks:
      - caddy
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data: {}

networks:
  caddy:
    external: true
